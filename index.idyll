[meta
  title:"Can you be good at the 3-card monte"
  description:"How your skill is irrelevant at the 3 card monte."
  shareImageUrl:"https://fredhohman.com/card-shuffling/static/images/share.png"
  shareImageWidth:"1600"
  shareImageHeight:"800" /]

[Header
  title:"Can you be good at the 3-card monte?"
  subtitle:"Riffling from factory order to complete randomness."
  author:"Jon Doe"
 /]

[Analytics google:"UA-42146340-1" /]


// [aside]
// Smooshing a deck is arguably more fun.
// [image style:`{width: '100%'}` src:"static/images/smoosh.gif" /]
// [/aside]

[image style:`{width: '100%'}` src:"static/images/monte.gif" /]





Riffle seven times and you'll have a sufficiently random ordering of cards, an ordering that has likely [never existed before](http://www.murderousmaths.co.uk/cardperms.htm).
In other words, it's unlikely you'll ever shuffle two decks the same.

[aside]
[This paper](https://projecteuclid.org/download/pdf_1/euclid.aoap/1177005705) shows a number of other interesting card shuffling results in all their gory details.
[/aside]

That is, using a standard deck of 52 cards, in one hand hold 51 cards and in the other hold the remaining single card.
 deck.

**So here's the question:**
[br/]
*How many single riffles do you have to do in order to have a completely shuffled deck?*

## Theorem
You could simulate this in a short program, which we will do towards the end, but first we can solve for the number of riffles explicitly.

Consider an ordered deck of cards.
[Without loss of generality](https://en.wikipedia.org/wiki/Without_loss_of_generality), let's say the suits are in the following order: [card suit:"S"/], [card suit:"C"/], [card suit:"H"/], [card suit:"D"/].
So our ordered deck looks like this.

[cardVis static:"True"/]

The bottom suit is [card suit:"D"/], which means the bottom card of our deck is the King of Diamonds ([card number:"K" suit:"D"/]).
Now perform the following iteration:

>Place the top card of the deck randomly inside the deck

This means taking the [card number:"A" suit:"S"/] and placing it randomly somewhere in the deck.
ery riffled card has a [Equation]\frac{1}{52}[/Equation] chance of moving to any new position in the deck, that means, on average, after about 52 top card riffles, the top card will become the new bottom card.

[aside]
**Note:** notice the [card number:"K" suit:"D"/] can only rise in the deck.
There are two cases:
1. The top card is placed above the [card number:"K" suit:"D"/], therefore its position does not change.
2. The top card is placed underneath the [card number:"K" suit:"D"/], therefore it rises one position closer to the top.
[/aside]

Once the [card number:"K" suit:"D"/] moves up one position, upon subsequent riffles there are now two spots for the new top card to be placed underneath it.
That means there is now a [Equation]\frac{1}{52}+\frac{1}{52}=\frac{2}{52}[/Equation] chance of a riffled card going underneath the [card number:"K" suit:"D"/].

[Equation display:true]
  \sum_{i=1}^{52} \frac{52}{i} = \frac{52}{1} + \frac{52}{2} + \frac{52}{3} + ... + \frac{52}{52} \approx 236
[/Equation]


## Let's play


[var name:"iter" value:0 /]
[var name:"flipvalue" value:0 /]
[var name:"shufflevalue" value:1 /]
[var name:"points" value:`[{x:0, y:52}]` /]
[var name:"endPoints" value:`[]` /]

[aside]
You have riffled **[Display value:iter format:"d" /]** times.
[br/]
[button onClick:`if(points[points.length-1].y !== 1){ if (flipvalue == 1){flipvalue = 0}else{flipvalue = 1}; shufflevalue = 1}`]Flip[/button]
[button onClick:`if(points[points.length-1].y !== 1){iter++;  shufflevalue = 0}`]Shuffle[/button]
[multiRiffle iter:iter points:points ]Shuffle (x10)[/multiRiffle]
[/aside]

[cardVis iterVar:iter points:points flipswitch:flipvalue shuffleswitch:shufflevalue /]
[var name:"shufflevalue" value:1 /]



[card number:"K" suit:"D"/]'s position in the deck for each riffle.
Notice how it takes many riffles to move the [card number:"K" suit:"D"/] up just a few positions, but once the [card number:"K" suit:"D"/] starts rising towards the top of the deck, it accelerates.


Here is a chart of the [card number:"K" suit:"D"/]'s position in the deck for each riffle.
Notice how it takes many riffles to move the [card number:"K" suit:"D"/] up just a few positions, but once the [card number:"K" suit:"D"/] starts rising towards the top of the deck, it accelerates.

[aside]
Once the [card number:"K" suit:"D"/] is the top card, click the **Clear** button to try again.
[button className:"clear" onClick:`endPoints.push([{iter:iter, position:-1}, {iter:iter, position:3}]); iter=-1; points=[{x:0, y:52}]; iter++;`]Clear[/button]
[/aside]
[positionChart iterVal:iter points:points endPoints:endPoints /]

// We can simulate this multiple times and verify that on average it takes 236 times.

### Acknowledgements
* This article was created using [a href:"https://idyll-lang.org/"]Idyll[/a].
* Shoutout to [a href:"https://twitter.com/mathisonian"]@mathisonian[/a] for help and feedback.
* The source code is available on [a href:"https://github.com/fredhohman/card-shuffling/"]Github[/a].
